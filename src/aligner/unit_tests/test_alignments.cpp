#include <iostream>
#include <algorithm> // for std::count
#include <string>
#include "catch.hpp"
#include "../alignments.hpp"
#include "../data.hpp"

TEST_CASE( "ref, uLR and cLR alignments are the same length", "[alignments]" ) {
	SECTION( "UntrimmedAlignments are the same length" ) {
		std::string ref = "C-GAGTCAATAAAAA";
		std::string ulr = "CTG-GTC--TAAG-A";
		std::string clr = "ctggTCAATaaga"; 
		UntrimmedAlignments alignments;
		Read_t alignedReads = alignments.align(ref,ulr,clr);
		ref = alignedReads.ref;
		ulr = alignedReads.ulr;
		clr = alignedReads.clr;

		std::cout << ref << std::endl;
		std::cout << ulr << std::endl;
		std::cout << clr << std::endl;

		REQUIRE( ref.length() == ulr.length() );
		REQUIRE( ulr.length() == clr.length() );
	}
	SECTION( "TrimmedAlignments are the same length" ) {
		std::string ref = "C-GAGTCAATAAAAA";
		std::string ulr = "CTG-GTC--TAAG-A";
		std::string clr = "TCAAT"; 

		TrimmedAlignments alignments;
		Read_t alignedReads = alignments.align(ref,ulr,clr);
		ref = alignedReads.ref;
		ulr = alignedReads.ulr;
		clr = alignedReads.clr;

		std::cout << ref << std::endl;
		std::cout << ulr << std::endl;
		std::cout << clr << std::endl;

		REQUIRE( ref.length() == ulr.length() );
		REQUIRE( ulr.length() == clr.length() );
	}
}

TEST_CASE( "Alignments output (-,X,X) delimiters to indicate the boundaries of corrected/trimmed segments",
           "[alignments]" ) 
{
	SECTION("An even number of delimiters are outputted when a segment of the cLR aligns outside of the uLR and ref") {
		std::string ref = "AAAAA";
		std::string ulr = "AAAAA";
		std::string clr = "TCCCTaaaaa"; 
		UntrimmedAlignments alignments;
		Read_t alignedReads = alignments.align(ref,ulr,clr);
		ref = alignedReads.ref;
		ulr = alignedReads.ulr;
		clr = alignedReads.clr;
		size_t refCount = std::count(ref.begin(), ref.end(), 'X');
		size_t ulrCount = std::count(ulr.begin(), ulr.end(), 'X');
		size_t clrCount = std::count(clr.begin(), clr.end(), 'X');

		std::cout << ref << std::endl;
		std::cout << ulr << std::endl;
		std::cout << clr << std::endl;


		SECTION( "uLR and cLR alignments contain an even number of X delimiters" ) {
			REQUIRE( ulrCount % 2 == 0 );
			REQUIRE( clrCount % 2 == 0 );
		}	

		SECTION( "uLR and cLR alignments contain the same number of X delimiters" ) {
			REQUIRE( ulrCount == clrCount );
		}

		SECTION( "the number of X delimiters in the ref alignment is 0" ) {
			REQUIRE( refCount == 0 );
		}
	}
	SECTION( "UntrimmedAlignments output (-,X,X) delimiters to indicate the boundaries of corrected segments" ) {
		std::string ref = "CGAGTCAATAAAAA";
		std::string ulr = "CGAGTCAATAAAAA";
		std::string clr = "cgagTCAATaaaaa"; 
		UntrimmedAlignments alignments;
		Read_t alignedReads = alignments.align(ref,ulr,clr);
		ref = alignedReads.ref;
		ulr = alignedReads.ulr;
		clr = alignedReads.clr;

		std::cout << ref << std::endl;
		std::cout << ulr << std::endl;
		std::cout << clr << std::endl;

		size_t refCount = std::count(ref.begin(), ref.end(), 'X');
		size_t ulrCount = std::count(ulr.begin(), ulr.end(), 'X');
		size_t clrCount = std::count(clr.begin(), clr.end(), 'X');
		
		SECTION( "uLR and cLR alignments contain an even number of X delimiters" ) {
			REQUIRE( ulrCount % 2 == 0 );
			REQUIRE( clrCount % 2 == 0 );
		}	

		SECTION( "uLR and cLR alignments contain the same number of X delimiters" ) {
			REQUIRE( ulrCount == clrCount );
		}

		SECTION( "the number of X delimiters in the ref alignment is 0" ) {
			REQUIRE( refCount == 0 );
		}
	}

	SECTION( "TrimmedAlignments output (-,X,X) delimiters to indicate the boundaries of trimmed segments" ) {
		std::string ref = "CGAGTCAATAAAAA";
		std::string ulr = "CGAGTCAATAAAAA";
		std::string clr = "CGAGT CAAT AAAAA";

		TrimmedAlignments alignments;
		Read_t alignedReads = alignments.align(ref,ulr,clr);
		ref = alignedReads.ref;
		ulr = alignedReads.ulr;
		clr = alignedReads.clr;

		size_t refCount = std::count(ref.begin(), ref.end(), 'X');
		size_t ulrCount = std::count(ulr.begin(), ulr.end(), 'X');
		size_t clrCount = std::count(clr.begin(), clr.end(), 'X');

		std::cout << ref << std::endl;
		std::cout << ulr << std::endl;
		std::cout << clr << std::endl;
		
		SECTION( "uLR and cLR alignments contain an even number of X delimiters" ) {
			REQUIRE( ulrCount % 2 == 0 );
			REQUIRE( clrCount % 2 == 0 );
		}	

		SECTION( "uLR and cLR alignments contain the same number of X delimiters" ) {
			REQUIRE( ulrCount == clrCount );
		}

		SECTION( "the number of X delimiters in the ref alignment is 0" ) {
			REQUIRE( refCount == 0 );
		}
	}
}

TEST_CASE( "ExtendedUntrimmedAlignments" )
{
	std::string ref = "C-GAGTCAATAAAAA";
	std::string ulr = "CTG-GTC--TAAG-A";
	std::string clr = "ACTACtggTCAATaagATAC"; 
	ExtendedUntrimmedAlignments alignment;
	Read_t alignedReads = alignment.align(ref,ulr,clr);
	ref = alignedReads.ref;
	ulr = alignedReads.ulr;
	clr = alignedReads.clr;

	size_t refCount = std::count(ref.begin(), ref.end(), 'X');
	size_t ulrCount = std::count(ulr.begin(), ulr.end(), 'X');
	size_t clrCount = std::count(clr.begin(), clr.end(), 'X');

	std::cout << ref << std::endl;
	std::cout << ulr << std::endl;
	std::cout << clr << std::endl;
	SECTION( "uLR and cLR alignments contain an even number of X delimiters" ) {
		REQUIRE( ulrCount % 2 == 0 );
		REQUIRE( clrCount % 2 == 0 );
	}	

	SECTION( "uLR and cLR alignments contain the same number of X delimiters" ) {
		REQUIRE( ulrCount == clrCount );
	}

	SECTION( "the number of X delimiters in the ref alignment is 0" ) {
		REQUIRE( refCount == 0 );
	}

}

TEST_CASE( "ExtendedTrimmedAlignments" )
{
	SECTION( "TrimmedAlignments are the same length" ) {
		std::string ref = "C-GAGTCAATAAAAA";
		std::string ulr = "CTG-GTC--TAAG-A";
		std::string clr = "TCAAT"; 

		ExtendedTrimmedAlignments alignments;
		Read_t alignedReads = alignments.align(ref,ulr,clr);
		ref = alignedReads.ref;
		ulr = alignedReads.ulr;
		clr = alignedReads.clr;

		std::cout << ref << std::endl;
		std::cout << ulr << std::endl;
		std::cout << clr << std::endl;

		REQUIRE( ref.length() == ulr.length() );
		REQUIRE( ulr.length() == clr.length() );
	}

}

TEST_CASE( "ExtendedUntrimmedAlignments on real colormap read" )
{
	std::cout << "\n\n";
	std::cout << "ExtendedUntrimmedAlignments on real colormap reads\n";

	std::string ref = "TA-CCAG---TATAT-GCAACAAA--TGCC-CG-TCGGCAGCAGCTTTACAATG--A--C-CATCAATGCCTGC-CAGACCTCTGTGA-ACTATGACGCCAGCAGCGGCGCACGCTGTAAGGATCAGGCC-TCC--GGC-AACTGGTATGTTCGCAACGTCACCCATA-C-GA-AA-G-CAGC-AAATC-T-ACGGTTG-ATA--AA-TACCC-ACTCGC-TG-G--CGGAAGT-AT-TTATCAACAGCGAC-GGAGTACCG-ACTCTGGGCGAAGGGA-ACGCCGACTG-C-CG-GACGCAAACCA-TCGGCAGCCGT-TCA-GGA-TTAAGTTGTAA-GATGG-TTAACT-ATAC-CCT-GCAAACAAACGGACTCAGCAACA-CC-TCA-ATCCATATATTCCCGGCGAT-CGC-CAA-CTCGTCGTTAGCC-T-CGGC-CGTC-GG-G-GCGTAC--GAT-ATGCAG-TTCA-GTCTGAATGGCAGTTCA-T-GGAAACCGGTGAG-CAATACC-GCCTATTACTACACCTTCAACGAGATGA-AG-AGCGCAGACTC--GATCTATGTTTTCTTCTCGAGCAACTTCTTTAA-GC-AG-A-TG--GTGAA--CC--TCGG--GATCAGCGAT--ATCAACACCAA-";
	std::string ulr = "TAGCCAGGAGTATATGGCAACAAACCTG-CACGTTCGGCAGCAGCTTTACAATGAGAATCCC-TCAATGC-TGCTCAGACCTCTGTGAGACTATGACGCCAGCAGCGG-GCACGCTG-AAGGATCAGGCCAGCCATGGCGAACTGGTGTGTTCGCAA-GTCACCCATAAATGATA-AGTCAGCCAAATCTTCACGGTTGCATACTAAC-ACCCCACTCGCGT-CGAACG-AAG-TATTTTATCAACAGCGACCGGAGTACCGAACTCTGGGCGAAGGGAAACGCCGACTGGCGAGGGACGCAAACCAATCGGCAGCCGTGT--TGGAACTAAGTTGTAAAGATGGA-TAACTTATA-CC-TCGCA-ACAAACGGACTCAGCAACAGCCGTCACATCCATA-ATTCC-GGCGATTCGCC-AAACTCGTCGTTAGCCATACGGCGCGTCAGGAGAGCGTACGCGATAATGCAGCT-CACGTCTGAATGGCAGTTCACTTGGAA-CC-GTGAGACAATACCTGCCTAT-ACTACACCTTCAACGAGA-GAAAGTAGC-CAGACTCCGGATCTAT-T-TTCTTCTCGAGCAACTTCTT-AAGGCTAGTAGTGGAGTGAAGACCAATCG-AGTATCAGCGATTGATCAACACCAAG";
	std::string clr = "GATGCACGGCATGTTGTCAGACGCGTTTTACCAGTATATGCAACAAATGCCCGTCGGCAGCAGCTTTACAATGACCATCAATGCCTGCCAGACCTCTGTGAACTATGACGCCAGCAGCGGCGCACGCTGTAAGGATCAGGCCTCCGGCAACTGGTATGTTCGCAACGTCACCCATACGAAAGCAGCAAATCTACGGTTGATAAAAACCCACTCGCTGGCGGAAGTATTTATCAACAGCGACGGAGTACCGACTCTGGGCGAAGGGAACGCCGACTGCCGGACGCAAACCATCGGCAGCCGTTCAGGATTAAGTTGTAAGATGGTTAACTATACCCTGCAAACAAACGGACTCAGCAACACCTCAATCCATATATTCCCGGCGATCGCCAACTCGTCGTTAGCCTCGGCCGTCGGGGCGTACCATATGCAGTTCAGTCTGAATGGCAGTTCATGGAAACCGGTGAGCAATACCGCCTATTACTACACCTTCAACGAGATGAAGAGCGCAGACTCGATCTATGTTTTCTTCTCGAGCAACTTCTTTAAGCAGATGGTGAACCTCGGGATCAGCGATATCAACACCAAAGATCT";

	ExtendedUntrimmedAlignments alignment;
	Read_t alignedReads = alignment.align(ref,ulr,clr);
	ref = alignedReads.ref;
	ulr = alignedReads.ulr;
	clr = alignedReads.clr;

	size_t refCount = std::count(ref.begin(), ref.end(), 'X');
	size_t ulrCount = std::count(ulr.begin(), ulr.end(), 'X');
	size_t clrCount = std::count(clr.begin(), clr.end(), 'X');

	std::cout << ref << std::endl;
	std::cout << ulr << std::endl;
	std::cout << clr << std::endl;
	SECTION( "uLR and cLR alignments contain an even number of X delimiters" ) {
		REQUIRE( ulrCount % 2 == 0 );
		REQUIRE( clrCount % 2 == 0 );
	}	

	SECTION( "uLR and cLR alignments contain the same number of X delimiters" ) {
		REQUIRE( ulrCount == clrCount );
	}

	SECTION( "the number of X delimiters in the ref alignment is 0" ) {
		REQUIRE( refCount == 0 );
	}
}

TEST_CASE( "ExtendedTrimmedAlignments on real Jabba reads" )
{
	std::cout << "\n\n";
	std::cout << "ExtendedTrimmedAlignments on real Jabba reads\n";

	std::string ref = "ACATAATCGGTGCCATATGGGTACCGTCCGGCGAAGTTG-GACGCTGA-TTTTCTGCGCCC-AACATTGTTGGGATTGATGGGCCGTAGATAT-CGGCGTCCAGAATGCC-GACT-TTCG-CCCCTTCTGCCGCCAGCGCC-AGTGCCAGGTTTACCG-CC-GTGGA-C-GATTTACCCACGCCGCCT-TTACCGGAA--CTCACCGCGAT---AATGTTCTT-CAC-ACCGT-TAATTCCCGGCTGATTCTTCACG-CGTTTCAGA-GTGG-CTATGTTATGCGACAGTTTCCAGTCGA-TAG-C-T-TTCGCCCCGGT-G-ATGCG-CAGCAG-TT-CGGCGCTACATTGCTCT-TTTAACTC-TTCGAACGCGCTATGCCAGACAA-ACGGCATAACCAGTTCCACATGC-AACG-TGTCGTCCATCCAGGCGACATGGTGCAACG-CTTTCAGCGTGGTGAGGTTATGCTT--CAGGGT---TGG-GTG-CT-GAAAA-TTGGCCAGTGTCCCGGCGACCATTGCGCGCAA-G-GCTT--CTGGTGATTTGGCCTG-G-GATTGTTC-GTTCA-TCCCGAC-TCCTTTTTT-GTATAGATA-AACCA-TCAGCTG-ATAG-TTTACCTGAAGAA-TATAGAGAAGTACTTACTTAACATTTTCCCATTTGGTACTATC-TAACCCC--TTTTCA-CTATTAAGAAGTAATGCCTACTATGACTCA--AGTCGCG-A-AGAAAATTC-TGGTGACGTGCG--CACT-G-CCGTACG-CTAACG-GCTCAATCCACCTCG-G-CCATATGC-TGGAGC-A-CATCCAGGCTGA-TGTCTGGGT-CCGTTA-CCAGCGAATGCG--CGGC-CACGAGGTCAACT-TCA--TCT-GCGCCGACGATGCCCACGGTACACCGATCATGCTG-AAAGCT-CAGCAGCTTGGTATCACCC-CG-G-AGCAGATGATTG-GCGAA-ATG-AGTCAGGAGCATCAGA-CTGA-TTT-CGCAGGCTTTAACA-TCAGC-TA-TGACAACTATCACTCGACG-CACAGCGAAGAGAACCG--CCAGTTGTCAG-AACT-T-ATCTACTCTC-G-CCTGAAAG-AAAACGGT-TT";
	std::string ulr = "ACATAATAGGTGCCATATGGGTACCGTCCGGCG-AGT-GGGACGCTGACTTTTCTGCGCCCTAACATTGCTGGGATT-AT-GGCCGTAGATATGCGGCG-CC-GAATGCCGG-CTCTT-GC-CCCTTCTGCCGCCAGC-CCAAGTGC-AGGTTTACCGCCCGGTGGATCCGATTTA-CCACGCCGCGTATTACCG-A-AACTCACCGC-ATATCAATGTTCT-TCA-CACCGTATAATTCCCGGCTGATTCT-CACGCCG-TTCAGAGGTGGTC-ATGTTATGCGACAGTTTCCAGTCGAATAGTCATA-TCGCC-CGGTCGGATGCGCCAGCAGGTTCCG-CGCTACATT-CTCTAT-TAACACA-TCGAACGCGCTATGCCAGACAAGACGGCATAACCAGTTCCACATGCTAACGTTGTCGTCCATCCAGGCGACATGG-GC-AC-A-TTTCAGCGTGGTGAGGTTATGCTTAACAGGGTCACTGGCGTGGCTAGAAAACTTGGCCAG-GTCCCGGCGACCATTGGGCGCAAG-GGCTTCACTGGTGAT-TGG-CTGAGAGATTG-TCAGTT-ATTCCCGACCGCCTTTTTTAGTA-AGATACAACCAGTCAGCTGCATAGATTTACCTGAAGAACTATAGAGAAGTACTTACTTAACAT-TTCCCATTTGGTACTATCATAACCCCTGTTTTCAGCTATTAAG-AGTAATGCCTACTATGACTCATAAGTCGCGTAGAGAAAATT-TTG-TG-CGTGCGAGGACTCGACCGTACACCTAACGCGCTCAATCCACCTCGTGGCCATATGCTTGGA-CGATCATCCAGGCTGACTGTCTGGGTGGC-TTAACCAGCGAATGCGTGCGGCACACG-GGTCAACTGTCAGTTCTCGCGCCGCCGA-GCCCACGGTACACCG-TCATGCTCGAAAGCTTCAGCAGCTTGGTAG--CCCTCGTGTAGCAGATGATTGTGCGAATAT-CAGTCAGGAGCAT-AGACCTGAGTTTGCGCAGG-TTTAACAGTCAGCCTACTGACAACTATCACTCGAC-TCACAGCGAAGAGAACCGATCCAGTTGTCAGCAA-TA-CATCTACTCTCCGTCCTGAAAGCAAAACGGTGTT";
	std::string clr = "ACATAATCGGTGCCATATGGGTACCGTCCGGCGAAGTTGGACGCTGATTTTCTGCGCCCAACATTGTTGGGATTGATGGGCCGTAGATATCGGCGTCCAGAATGCCGACTTTCGCCCCTTCTGCCGCCAGCGCCAGTGCCAGGTTTACCGCCGTGGACGATTTACCCACGCCGCCTTTACCGGAACTCACCGCGATAATGTTCTTCACACCGTTAATTCCCGGCTGATTCTTCACGCGTTTCAGAGTGGCTATGTTATGCGACAGTTTCCAGTCGATAGCTTTCGCCCCGGTGATGCGCAGCAGTTCGGCGCTACATTGCTCTTTTAACTCTTCGAACGCGCTATGCCAGACAAACGGCATAACCAGTTCCACATGCAACGTGTCGTCCATCCAGGCGACATGGTGCAACGCTTTCAGCGTGGTGAGGTTATGCTTCAGGGTTGGGTGCTGAAAATTGGCCAGTGTCCCGGCGACCATTGCGCGCAAGGCTTCTGGTGATTTGGCCTGGGATTGTTCGTTCATCCCGACTCCTTTTTTGTATAGATAAACCATCAGCTGATAGTTTACCTGAAGAATATAGAGAAGTACTTACTTAACATTTTCCCATTTGGTACTATCTAACCCCTTTTCACTATTAAGAAGTAATGCCTACTATGACTCAAGTCGCGAAGAAAATTCTGGTGACGTGCGCACTGCCGTACGCTAACGGCTCAATCCACCTCGGCCATATGCTGGAGCACATCCAGGCTGATGTCTGGGTCCGTTACCAGCGAATGCGCGGCCACGAGGTCAACTTCATCTGCGCCGACGATGCCCACGGTACACCGATCATGCTGAAAGCTCAGCAGCTTGGTATCACCCCGGAGCAGATGATTGGCGAAATGAGTCAGGAGCATCAGACTGATTTCGCAGGCTTTAACATCAGCTATGACAACTATCACTCGACGCACAGCGAAGAGAACCGCCAGTTGTCAGAACTTATCTACTCTCGCCTGAAAGAAAACGGTTTTATTAAAAACCGCACCATCTCTCAGCTGTACGATCCGGAAAAAGGCATGTTCCTGCCGGACC";
	ExtendedTrimmedAlignments alignment;
	Read_t alignedReads = alignment.align(ref,ulr,clr);
	ref = alignedReads.ref;
	ulr = alignedReads.ulr;
	clr = alignedReads.clr;

	std::cout << std::endl;
	std::cout << ref << std::endl;
	std::cout << ulr << std::endl;
	std::cout << clr << std::endl;

	ref = "C-TGTCCA--GTGCGCCGGTT-GGTTC-A-TC-GGCAAGA-AT-TACCTGAC--CAC-CGT-TCAT-C-AATGCCCGCGC-GATGCTGACGC-GCTGTTGCTG-AC-CACC-C-GAAAGCTGTGCCGGAT-A---ATA-CTCTGTACGG-TCT-TCCAGCCCCAGCC-GT-TGCAGCAACTCCTG-GGCACGAAGCAGTCG-C-TGTTT-CCGCTCAAGACCAGCATAGACGGCGGGTACTTCAACGTTCTGCTCGGCGGTTAAATGCGAAAGCAAATGGTAACGCTGG-AAA-ATAAAGCCGAAATGC-TC-GCGGCGCAGTTGCGCCAGCGCATCGGC-GTC-CAGCG-TGG--CAACATC-CTGACCGGC-GACGCGATAGGTG-CCGCTGGTGGCC-TT-ATCCAGACAGCCGAGAATATT-CATC-AGGGTCGATTTACCGGAACCC-G--AAGCG-CCA-ACAATCGCGACCATCTCAC--CCGC-ATAAATA-TCGAG-GCTGAT-";
	ulr = "CTTGGCCACGGTGCGCCGGTTCGGTTCAACTCCGGCAAGAGATG-ACCTGACAG-ACACG-TTCATCCCAATGCCCGCGCTG-TGCTG--GCGGCTGT-GCTGAACAGACCTCCGAAAGCTGTGCCGGATTATATATAGCTC-GTACGGTTCTTTCCAGCCCCAGCCAGTCTGCAG-AACTCCTGCGGCACGAAGCAGTCGGCCTGTTTACCGCTCAAG-CCA-CATAGACGGCGGGTACTTCAACGTTCTGCTCGGCG-TTAAATGCGAAAGCAAATGGTAACGCTGGGAAACTTAAAGCCGAAATGCTTCAGCGGCGCA-TTGCGCCAGCGCATCGGCCGTCTCAGC-TTGGCTCAACAT-GCTGACCGGCTCACGCGA-AGGTGTCCGCTGGTGGCCGTTTATCCAGACAGCCGAGAATATTACATCAAGGGTCGATTTACCGGAACCCGGATAAGCGCCCATACAATCGCGACCATCTCACAA-CGCAATAAATAGTCGAGGG-TGA-T";
	clr = "CCATCACCTCTTCGCCAGAATGGCTGTCCAGTGCGCCGGTTGGTTCATCGGCAAGAATTACCTGACCACCGTTCATCAATGCCCGCGCGATGCTGACGCGCTGTTGCTGACCACCCGAAAGCTGTGCCGGATAATACTCTGTACGGTCTTCCAGCCCCAGCCGTTGCAGCAACTCCTGGGCACGAAGCAGTCGCTGTTTCCGCTCAAGACCAGCATAGACGGCGGGTACTTCAACGTTCTGCTCGGCGGTTAAATGCGAAAGCAAATGGTAACGCTGGAAAATAAAGCCGAAATGCTCGCGGCGCAGTTGCGCCAGCGCATCGGCGTCCAGCGTGGCAACATCCTGACCGGCGACGCGATAGGTGCCGCTGGTGGCCTTATCCAGACAGCCGAGAATATTCATCAGGGTCGATTTACCGGAACCCGAAGCGCCAACAATCGCGACCATCTCACCCGCATAAATATCGAGGCTGATGCCCTTCAGCACCTCAACC";

	alignedReads = alignment.align(ref,ulr,clr);
	ref = alignedReads.ref;
	ulr = alignedReads.ulr;
	clr = alignedReads.clr;

	std::cout << std::endl;
	std::cout << ref << std::endl;
	std::cout << ulr << std::endl;
	std::cout << clr << std::endl;

	ref = "--CCAGG--TATTACT-ATG-G-TATGGTGA-CGTTAC-T-AC-ATC-CGAGGGGTTGCAAGTT-TCCAATGCATTAAAAATTAG-GCAATATCCCCT-ACTTGGA-ATAATTTCTT-TAAAGGCTGAGAAAAAAATAGAGTTAATAGCAA-GAGT-TGAAGGTTCTA-TTTCTAAC--TACAAAGCCCAAGATTTGGAGGCC-ATATTCTC--CAAGAATTATTCTCGATTAATTCAATTGCGTCAGC-AAAGACAAAAT-ATTGAAA-TGCAGAGATT-AATAAGACAACAACA-GGA-T-TC--AAGATACCA-GGATTCCTTAA--GACGTGATCAACAAAGAGAATC-AGAAAGATTGGAACA-GACCCAAAGAGAACAAA-TGGAAAGAGAGCACCAA-AGAA--TAGA-AAA-CCAATGGCTATTGTGGAGAAAAAGCCAACTA-A-AACCCG-AACCCTCTTCT-GATAAAG--ATGCAAGCAAA-GTTGC-G-A-TCAGACTAGAAAATGG-GCAGAGAT-T--A--GTGAGAAAGTTTGACGC-A-T-CT-CTACCA-ACGGAGGAGATATATGCCTTCGTAGA-ATTAC-AGTTGCATGACATGTTG--AACTCAGAAAAC-GA--TA-CTTTACCCGTA-T-ACCAACCTG-CTAA-TTATCAGC-ACCAGTATAGCTTCAAATTGAT-CAC-GCCGGTACC-AAGAAGAGAGC-TTGAT-TTATCTA-CCAAA-ATAT---CTGACGTTAGCGGCATATATCCATCAGGAAA-TATTGTAATGGA-ACG-CCTG--GACGAATGA-A--AGGAATTTCA-AAAATAGTCATCTCAAAACGTTTATTC-TAAAGTTTAGTTAAATTTATATCTACACAACTTT-ATGCAATTAATCTTTTAT-ATCTACG-TT-GCCATCCTTT-AATCTACA-CATCCAAAGATAACAA-G-AGGCGCACATGCCTTTTGACTCAAGTG-TCACGTGC-ATCAGTTTTTCTTCGCTACCTTGT-TTTT-CTT-TCCTGT-C-TTA-CTGATGGTACCGT-T-CTTACTCTTCTTTTTCTTCTTCTTGATCAAATTCTGCATG-CCCCC-CTTA-AATACAGATGAATACTCTTGCCAAAATT-G-ATCTAACTCAC-TTGC-TTTTACCA-CTGTTGA-GCATT-TTGTTT-TCTTGTCATGCGAGCCATAAGACATTCTGATTAATAGT-GGGTATTCTCTGTCAGATCTTGAGCTAACTGAAATTTCAGAAGCCT-TTTTAG-AT-ACATCATAGTCA-GGATGGTTG-GTAGAATCAAA-TTCAAGA--T-TCC--CTT-CCACAGG-ATCGTGTTCTATGAG-TCTTTTGGCCGTTAG-ACGCACAGTTATAT-GTTTTTCATTCGCA-GTCT-GGAAAAATTCTGGAACCT";
	ulr = "CTCCAGGATTATTAC-TATGCGGTATGGTGAGCGTTACTTTACTATCCCGAGGGGTTGCA-GTTC-CCAATGCATTAAAAATTAGGGCAATATCCCCTCACTTG-AA-TAATTTCTTGTAAAGGCTGAGAAAAAAATAGA-TTAATAGCAACGAGTGTGAAGGTTCTAGTTTCTAACTTTACAAAGCC-AAGATTTGGAGGCCGATATTCTCTACAAGAATTATTCTCGATTAATTCAA-TGCGTCAGCT--AGACAAAATTATTGAAACTGCAGAGATTCAATAA-ACAACAACATGGATTTTCGAAAGATACCACGGATTCCTTAACTGACGTGATCAACAAAGAG-ATCAAGAAAGA-TGGAACACG--CC-AAGAGTACAAATTGGAAAGAGAGCACAAAGAGAAACTAGAGAAACCCAATGGCTATTGTGGAGAAAAAGCCAA-TACAC-ACCCGAAACCCTCTTCTCGATAAAGGGATGCAAGCAAAAGTCGCA-A-C-CAGA-TAGAAAATGGGGCA-AGATATCAACAGTGAGAA-GTTTGACGCAAGTCCTTCTACCACACGG-GGAGATATATGCCTTCGTAGATATTACTAGTTGGATGACATGTTGAAAACTCAGAAAA-T-AAATAACTTTACCCGTATTAACCAAC-TGTCTAAA-TAACAGCAACCAGT-TAGCTTC-AATTGATACACTGCCGGTACCTAAGAAGAGAGCATTGATCTTATCTAACCAAACATATACCCTGACGTTAGCGGCA-ATATCCATCAGGAAACTAATG-AA-GGATACGTCCTGCCGACGAATGAGAGGAGCAATTTCAAAAAATAGTCATCTCAAAACGTTTATTCATAAAGTTTAGTTAAATTTATATCTACACAACTTTAATGCAATTAATCTT-TATTATCTACGGTTAGCCATCCTT-TAATCTACAACATCCAAAGATAACAAT-AAGGCGC-CATGCCTTTGGACTCAAGTGTTCACGTGCCATCAGTTTTTCTTCGC-ACCTTGTATTTTCCTTCTCCCGGCCCTTATCTGATGGTACCGTGTACTTACTCTTCTTTTTCTTCTTCTTGATCAAATTCTGCATGACCCGCACTT-TAATAC-GATGAATACTCTTGCCAAAATTCGTATCTAACTCACCTTGCTTTTTACCAGCTGTTGACGCATTCTTGTTTATC-TGTCATGCGAGCCATAAGACATTCTG-TTAATAGTA-GGTATTCTCTGTCAGATCTTGAGCTAACTGAAATTTCAGAAGCCTATT-T-GTATCACATCATAGTCACGGATGGTTCCGTA-AATCAAAGTTCAAGAAGTATCCCAC-TACCACCGGTAT-GTGTTCTA-GAGATCTTTTGGCC-TTAGCACGCACAGTTA-ATGGTTTTTCATTC-CAAGTCTTGGAAA-ATTCT-GAACCT";
	clr = "TAAGGAAGTACCAGGTATTACTATGGTATGGTGACGTTACTACATCCGAGGGGTTGCAAGTTTCCAATGCATTAAAAATTAGGCAATATCCCCTACTTGGAATAATTTCTTTAAAGGCTGAGAAAAAAATAGAGTTAATAGCAAGAGTTGAAGGTTCTATTTCTAACTACAAAGCCCAAGATTTGGAGGCCATATTCTCCAAGAATTATTCTCGATTAATTCAATTGCGTCAGCAAAGACAAAATATTGAAATGCAGAGATTAATAAGACAACAACAGGATTCAAGATACCAGGATTCCTTAAGACGTGATCAACAAAGAGAATCAGAAAGATTGGAACAGACCCAAAGAGAACAAATGGAAAGAGAGCACCAAAGAATAGAAAACCAATGGCTATTGTGGAGAAAAAGCCAACTAAAACCCGAACCCTCTTCTGATAAAGATGCAAGCAAAGTTGCGATCAGACTAGAAAATGGGCAGAGATTAGTGAGAAAGTTTGACGCATCTCTACCAACGGAGGAGATATATGCCTTCGTAGAATTACAGTTGCATGACATGTTGAACTCAGAAAACGATACTTTACCCGTATACCAACCTGCTAATTATCAGCACCAGTATAGCTTCAAATTGATCACGCCGGTACCAAGAAGAGAGCTTGATTTATCTACCAAAATATCTGACGTTAGCGGCATATATCCATCAGGAAATATTGTAATGGAACGCCTGGACGAATGAAAGGAATTTCAAAAATAGTCATCTCAAAACGTTTATTCTAAAGTTTAGTTAAATTTATATCTACACAACTTTATGCAATTAATCTTTTATATCTACGTTGCCATCCTTTAATCTACACATCCAAAGATAACAAGAGGCGCACATGCCTTTTGACTCAAGTGTCACGTGCATCAGTTTTTCTTCGCTACCTTGTTTTTCTTTCCTGTCTTACTGATGGTACCGTTCTTACTCTTCTTTTTCTTCTTCTTGATCAAATTCTGCATGCCCCCCTTAAATACAGATGAATACTCTTGCCAAAATTGATCTAACTCACTTGCTTTTACCACTGTTGAGCATTTTGTTTTCTTGTCATGCGAGCCATAAGACATTCTGATTAATAGTGGGTATTCTCTGTCAGATCTTGAGCTAACTGAAATTTCAGAAGCCTTTTTAGATACATCATAGTCAGGATGGTTGGTAGAATCAAATTCAAGATTCCCTTCCACAGGATCGTGTTCTATGAGTCTTTTGGCCGTTAGACGCACAGTTATATGTTTTTCATTCGCAGTCTGGAAAAATTCTGGAACCTTTGATAAAAATGCACCTGGTGATAAACAGCCAGTATTTGCCATTGTTTTAGGGTGGTAAGAAAGCTACGTTTTTTGATTTGT";
	alignedReads = alignment.align(ref,ulr,clr);
	ref = alignedReads.ref;
	ulr = alignedReads.ulr;
	clr = alignedReads.clr;
	std::cout << std::endl;
	std::cout << ref << std::endl;
	std::cout << ulr << std::endl;
	std::cout << clr << std::endl;
}
